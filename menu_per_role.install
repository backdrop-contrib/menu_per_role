<?php

/**
 * @file
 * Install, update and uninstall functions for the menu_per_role module.
 */

/**
 * Implements hook_schema().
 */
function menu_per_role_schema() {
  $schema['menu_per_role'] = array(
    'fields' => array(
      'mlid' => array(
        'description' => 'The menu identifier.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'rids' => array(
        'description' => 'The role identifiers separated by commas. Show to those roles.',
        'type' => 'text',
        'not null' => TRUE,
      ),
      'hrids' => array(
        'description' => 'The role identifiers separated by commas. Hide from those roles.',
        'type' => 'text',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('mlid'),
    'foreign keys' => array(
      'mlid' => array(
        'table' => 'menu',
        'columns' => array('mlid' => 'mlid'),
      ),
    ),
  );
  return $schema;
}

/**
 * Convert Drupal 7 migrated roles from IDs to Keys.
 */
function menu_per_role_update_1000() {
  $records = db_select('menu_per_role', 'mpr')
    ->fields('mpr')
    ->execute()
    ->fetchAllAssoc('mlid');

  foreach ($records as $key => $record) {
    $updateRecord = FALSE;
    $rids = $record->rids;
    $ridParts = explode(',', $rids);

    // Iterate through each rid that needs to be converted.
    foreach ($ridParts as &$rid) {
      switch ($rid) {
        case 1:
          $rid = BACKDROP_ANONYMOUS_ROLE;
          $updateRecord = TRUE;

          break;
        case 2:
          $rid = BACKDROP_AUTHENTICATED_ROLE;
          $updateRecord = TRUE;

          break;
      }
    }

    $hrids = $record->hrids;
    $hridParts = explode(',', $hrids);

    // Iterate through each hrid that needs to be converted.
    foreach ($hridParts as &$hrid) {
      switch ($hrid) {
        case 1:
          $hrid = BACKDROP_ANONYMOUS_ROLE;
          $updateRecord = TRUE;

          break;
        case 2:
          $hrid = BACKDROP_AUTHENTICATED_ROLE;
          $updateRecord = TRUE;

          break;
      }
    }

    if ($updateRecord) {
      db_update('menu_per_role')
        ->fields([
          'rids' => implode(',', $ridParts),
          'hrids' => implode(',', $hridParts),
        ])
        ->condition('mlid', $key)
        ->execute();
    }
  }
}
